{"version":3,"file":"main.5c5086bc6014b948b195.hot-update.js","sources":["webpack:///./stories/molecules/buttons/NeumorphismSimpleButton.tsx"],"sourcesContent":["import { View, Text, TouchableWithoutFeedback, Animated } from \"react-native\";\nimport React, { useEffect } from \"react\";\nimport {\n    ButtonOuter,\n    ButtonInner,\n    ButtonFaceGradient,\n} from \"./styles\";\nimport { useCallback, useState, useMemo } from \"react\";\nimport { useRef } from \"react\";\n\ntype ButtonProps = {\n    onPress: () => void;\n    size: number;\n    distance: number;\n    blur: number;\n    borderRadius: number;\n}\n\n// --positionX: 20px;\n// --positionXOpposite: -20px;\n// --positionY: 20px;\n// --positionYOpposite: -20px;\n// --angle: 145deg;\n// --blur: 60px;\n// --textColor: #001f3f;\n// --textColorOpposite: #e0e0e0;\n// --baseColor: #e0e0e0;\n// --darkColor: #bebebe;\n// --lightColor: #ffffff;\n// --firstGradientColor: #e0e0e0;\n// --secondGradientColor: #e0e0e0;\n// --size: 300px;\n// --radius: 50px\n\nfunction NeumorphismSimpleButton(props: ButtonProps) {\n    const { onPress, size = 150, distance = 20, blur = 35, borderRadius = 30 } = props;\n    const blurAnimation = useRef(new Animated.Value(0)).current;\n    const shadowColorAnimation = useRef(new Animated.Value(0)).current;\n\n\n    const [isDown, setDown] = useState(false);\n\n\n\n\n    const animateIn = () => {\n        // Will change fadeAnim value to 1 in 5 seconds\n\n\n\n        Animated.timing(shadowColorAnimation, {\n            toValue: 1,\n            duration: 5000,\n            useNativeDriver: false\n        }).start(() => {\n\n        });\n\n\n    };\n\n\n    const animateOut = () => {\n\n\n\n        Animated.timing(shadowColorAnimation, {\n            toValue: 0,\n            duration: 5000,\n            useNativeDriver: false\n        }).start(() => {\n\n        });\n\n\n    };\n\n    useEffect(() => {\n        if (isDown) {\n            animateIn();\n        } else {\n            animateOut();\n        }\n    }, [isDown])\n\n\n    const handleOnPress = () => {\n        onPress()\n        setDown(!isDown)\n    }\n\n\n\n    const gradientColors = useMemo(() => isDown ? ['#d1d9e6', '#ffffff'] : ['#ffffff', '#d1d9e6'], [isDown]);\n    const gradientStart = useMemo(() => isDown ? ({ x: 145, y: 125 }) : ({ x: 145, y: 125 }), [isDown]);\n    const gradientEnd = useMemo(() => isDown ? ({ x: 145, y: 145 }) : ({ x: 1, y: 145 }), [isDown]);\n\n    const shadowColors = useMemo(() => isDown ? ['#bebebe', '#fff'] : ['#fff', '#bebebe'], [isDown]);\n\n    console.log(shadowOneAnimation)\n    return (\n        <TouchableWithoutFeedback\n\n            onPress={handleOnPress}\n        >\n            {/* <View style={{ width: size + distance, height: size + distance, borderWidth: 1, justifyContent: 'center', alignItems: 'center' }}> */}\n\n            <ButtonOuter style={[{\n\n                shadowColor: shadowColorAnimation.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: ['#fff', '#bebebe']\n                }),\n            }]} borderRadius={borderRadius} blur={blur} distance={distance} size={size}>\n                <ButtonInner style={[{\n\n                    shadowColor: shadowColorAnimation.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: ['#bebebe', '#ff']\n                    }),\n                }]} borderRadius={borderRadius} blur={blur} distance={distance} size={size}>\n                    {/* <ButtonFaceGradient\n                        borderRadius={borderRadius} distance={distance} size={size} colors={gradientColors}  >\n                    </ButtonFaceGradient> */}\n                </ButtonInner>\n            </ButtonOuter>\n            {/* </View> */}\n\n        </TouchableWithoutFeedback >\n    );\n}\n\nNeumorphismSimpleButton.defaultProps = {\n\n}\n\nexport default NeumorphismSimpleButton;\n"],"mappings":";;;;;;;;;;AACA;;;;A","sourceRoot":""}