{"version":3,"file":"main.917044e0f8b44ebcbfd8.hot-update.js","sources":["webpack:///./stories/molecules/buttons/NeumorphismSimpleButton.tsx","webpack:///./stories/molecules/buttons/styles.tsx"],"sourcesContent":["import { View, Text, TouchableWithoutFeedback, Animated } from \"react-native\";\nimport React, { useEffect } from \"react\";\nimport {\n    ButtonOuter,\n    ButtonInner,\n    ButtonFaceGradient,\n} from \"./styles\";\nimport { useCallback, useState, useMemo } from \"react\";\nimport { useRef } from \"react\";\n\ntype ButtonProps = {\n    onPress: () => void;\n    size: number;\n    distance: number;\n    blur: number;\n    borderRadius: number;\n}\n\n// --positionX: 20px;\n// --positionXOpposite: -20px;\n// --positionY: 20px;\n// --positionYOpposite: -20px;\n// --angle: 145deg;\n// --blur: 60px;\n// --textColor: #001f3f;\n// --textColorOpposite: #e0e0e0;\n// --baseColor: #e0e0e0;\n// --darkColor: #bebebe;\n// --lightColor: #ffffff;\n// --firstGradientColor: #e0e0e0;\n// --secondGradientColor: #e0e0e0;\n// --size: 300px;\n// --radius: 50px\n\nfunction NeumorphismSimpleButton(props: ButtonProps) {\n    const { onPress, size = 150, distance = 20, blur = 35, borderRadius = 30 } = props;\n    const blurAnimation = useRef(new Animated.Value(0)).current;\n    const colorAnimation = useRef(new Animated.Value(0)).current;\n    const shadowOneAnimation = colorAnimation.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['#bebebe', '#ffffff']\n    })\n\n    const shadowTwoAnimation = colorAnimation.interpolate({\n        inputRange: [1, 0],\n        outputRange: ['#fff', '#bebebe']\n    })\n    const [isDown, setDown] = useState(false);\n\n\n\n\n    const animateIn = () => {\n        // Will change fadeAnim value to 1 in 5 seconds\n        Animated.timing(blurAnimation, {\n            toValue: blur,\n            duration: 5000,\n            useNativeDriver: false\n        }).start();\n\n\n        Animated.timing(colorAnimation, {\n            toValue: 1,\n            duration: 5000,\n            useNativeDriver: false\n        }).start();\n    };\n\n\n    const animateOut = () => {\n        // Will change fadeAnim value to 1 in 5 seconds\n        Animated.timing(blurAnimation, {\n            toValue: blur,\n            duration: 5000,\n            useNativeDriver: false\n        }).start();\n\n        Animated.timing(colorAnimation, {\n            toValue: 0,\n            duration: 5000,\n            useNativeDriver: false\n        }).start();\n    };\n\n\n\n    const handlePressIn = useCallback(() => {\n        animateIn()\n        setDown(true);\n    }, [setDown, animateIn]);\n\n    const handlePressOut = useCallback(() => {\n        animateOut()\n        setDown(false);\n    }, [setDown, animateOut]);\n\n    const gradientColors = useMemo(() => isDown ? ['#d1d9e6', '#ffffff'] : ['#ffffff', '#d1d9e6'], [isDown]);\n    const gradientStart = useMemo(() => isDown ? ({ x: 145, y: 125 }) : ({ x: 145, y: 125 }), [isDown]);\n    const gradientEnd = useMemo(() => isDown ? ({ x: 145, y: 145 }) : ({ x: 1, y: 145 }), [isDown]);\n\n    const shadowColors = useMemo(() => isDown ? ['#bebebe', '#fff'] : ['#fff', '#bebebe'], [isDown]);\n\n    console.log(blurAnimation)\n    return (\n        <TouchableWithoutFeedback\n            onPress={onPress}\n            onPressIn={handlePressIn}\n            onPressOut={handlePressOut}>\n            {/* <View style={{ width: size + distance, height: size + distance, borderWidth: 1, justifyContent: 'center', alignItems: 'center' }}> */}\n\n            <ButtonOuter style={{ shadowBlur: blurAnimation }} shadowColor={shadowColors[0]} borderRadius={borderRadius} blur={blur} distance={distance} size={size}>\n                <ButtonInner shadowColor={shadowColors[1]} borderRadius={borderRadius} blur={blur} distance={distance} size={size}>\n                    <ButtonFaceGradient angle={145}\n                        angleCenter={{ x: 0.5, y: 0.5 }} useAngle={true} borderRadius={borderRadius} distance={distance} size={size} colors={gradientColors}  >\n                    </ButtonFaceGradient>\n                </ButtonInner>\n            </ButtonOuter>\n            {/* </View> */}\n\n        </TouchableWithoutFeedback>\n    );\n}\n\nNeumorphismSimpleButton.defaultProps = {\n\n}\n\nexport default NeumorphismSimpleButton;\n","import styled from \"styled-components/native\";\nimport { Button, TouchableOpacity, View, Animated } from \"react-native\";\nimport { LinearGradient } from \"expo-linear-gradient\";\n\ninterface ButtonInterface {\n  size: number;\n  distance: number;\n  blur: number;\n  borderRadius: number;\n  shadowColor: string;\n  shadowBlur: number;\n}\n\nexport const ButtonFace = styled(View)`\n  padding: 50px;\n`;\n\nexport const ButtonFaceGradient = styled(LinearGradient) <ButtonInterface>`\n    \n    border-radius: ${({ borderRadius }) => `${borderRadius}px`};\n    width: ${({ size }) => `${size}px`}\n    height: ${({ size }) => `${size}px`}\n\n \n    \n`;\n\nexport const ButtonOuter = styled(Animated.View) <ButtonInterface>`\ndisplay: flex;\nwidth: ${({ size }) => `${size}px`}\n    height: ${({ size }) => `${size}px`}\n\n \n\n    border-radius: ${({ borderRadius }) => `${borderRadius}px`};\n    shadow-offset: ${({ distance }) => `${distance}px ${distance}px`};\n    shadow-color: ${({ shadowColor }) => shadowColor};\n    shadow-opacity: 1.0;\n    shadow-radius: ${({ borderRadius }) => `${borderRadius}px`};\n    shadow-blur: ${({ blur }) => blur};\n    margin-top: 20px;\n    margin-bottom: 20px;\n\n \n`;\n\nexport const ButtonInner = styled(Animated.View) <ButtonInterface>`\n  display: flex;\n  border-radius: ${({ borderRadius }) => `${borderRadius}px`};\n \n  shadow-offset: ${({ distance }) => `-${distance}px -${distance}px`};\n  width: ${({ size }) => `${size}px`}\n    height: ${({ size }) => `${size}px`}\n  shadow-color: ${({ shadowColor }) => shadowColor};\n  shadow-opacity: 1.0;\n  shadow-radius: ${({ borderRadius }) => `${borderRadius}px`};\n  shadow-blur: ${({ blur }) => blur};\n  /* margin-top: 20px;\n  margin-bottom: 20px; */\n\n \n`;\n"],"mappings":";;;;;;;;;;AACA;;;;;;;;;;;;ACDA;;;;A","sourceRoot":""}