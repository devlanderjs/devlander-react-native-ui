{"version":3,"file":"main.a5999296219c459299b9.hot-update.js","sources":["webpack:///./providers/ThemeProvider/fonts.ts","webpack:///./providers/ThemeProvider/theme.tsx","webpack:///./stories/atoms/containers/BaseViewContainer/BaseViewContainer.tsx","webpack:///./stories/atoms/containers/ViewContainer/ViewContainer.tsx","webpack:///./stories/atoms/containers/ViewContainer/styles.tsx","webpack:///./stories/molecules/buttons/NeumorphismSimpleButton.stories.tsx","webpack:///./stories/molecules/buttons/NeumorphismSimpleButton.tsx","webpack:///./stories/molecules/buttons/styles.tsx"],"sourcesContent":["import { Platform } from \"react-native\";\nimport { fontConfigInterface } from \"../../types/theme.types\";\n\n\nexport const fontConfig: fontConfigInterface = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400',\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500',\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300',\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100' ,\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'Avenir-Light',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'Avenir-Light',\n      fontWeight: '500' \n    },\n    light: {\n      fontFamily: 'Avenir-Light',\n      fontWeight: '300' \n    },\n    thin: {\n      fontFamily: 'Avenir-Light',\n      fontWeight: '100',\n    },\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal' \n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal' \n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal'\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal' \n    },\n  },\n}\n\nlet fontOptions = {\n  \n  Font2Condensed: {\n    name: 'RobotoCondensed',\n\n    light: 'RobotoCondensed-Light',\n    regular: 'RobotoCondensed-Regular',\n    bold: 'RobotoCondensed-Bold',\n  },\n  Font2: {\n    regular: 'Cabin-Regular',\n    bold: 'Cabin-Bold',\n    name: 'Cabin',\n},\n  Font1Condensed: {\n    light: 'RobotoCondensed-Light',\n    regular: 'RobotoCondensed-Regular',\n    bold: 'RobotoCondensed-Bold',\n    name: 'RobotoCondensed',\n},\nFont1: {\n  light: 'Roboto-Light',\n  regular: 'Roboto-Medium',\n  bold: 'Roboto-Bold',\n  name: 'Roboto',\n}}\n\n\nexport const configureFonts = () => {\n    let temp =  Platform.select({ ...fontConfig });\n  let fonts = {\n    ...fontOptions,\n    ...temp,\n  }\n\n\n    return fonts;\n}\n\n","import { RFValue } from 'react-native-responsive-fontsize';\nimport { Dimensions, NativeModules, Platform } from 'react-native';\nimport { configureFonts } from './fonts';\nimport {\n    boxShadowFuncInterface,\n    handleFontSizePropsInterface,\n    handleUnitPropsInterface,\n    colorsInterface,\n    paddingForThemeType,\n    ThemeInterface,\n    capFontSizeInterface\n} from '../../types/theme.types';\nimport * as Device from 'expo-device';\n\nexport const STATUSBAR_HEIGHT =\n    Platform.OS === 'ios' ? 20 : 0;\n\nexport const windowHeight = Dimensions.get('window').height || 0.1;\nexport const windowWidth = Dimensions.get('window').width || 0.1;\n\nexport const boxShadowOne: boxShadowFuncInterface = (color) => {\n    return `0px -1px 10px ${color}`;\n};\n\nexport const handleFontSizeProps: handleFontSizePropsInterface = (\n    fontSize?: string | number,\n    standardScreenHeight?: number\n): string => {\n    const previousSize = fontSize;\n    if (!fontSize) {\n        fontSize = '13px';\n    }\n\n    if (fontSize && typeof fontSize === 'number') {\n        if (standardScreenHeight) {\n            fontSize = `${RFValue(fontSize, standardScreenHeight)}px`;\n        } else {\n            fontSize = `${RFValue(fontSize)}px`;\n        }\n    } else if (fontSize && typeof fontSize === 'string') {\n        let numbericValue = parseInt(fontSize, 10);\n        if (standardScreenHeight) {\n            fontSize = `${RFValue(numbericValue, standardScreenHeight)}px`;\n        } else {\n            fontSize = `${RFValue(numbericValue)}px`;\n        }\n    }\n\n    return fontSize.toString();\n};\n\nexport const handleUnitProps: handleUnitPropsInterface = (\n    units?: number | string\n): string => {\n    \n    if (!units) {\n        units = '0px';\n        return units;\n    }\n\n    const hasPercentage =\n        units && units.toString().includes('%')\n            ? units.toString().includes('%')\n            : false;\n\n    if (units && typeof units === 'number') {\n        if (hasPercentage) {\n            units = units.toString();\n        } else {\n            units = `${units}px`;\n        }\n    }\n\n    return units.toString();\n};\n\n\nexport const paddingForScrollView = 15;\nexport const paddingForScrollViewTwo = 5;\n\n// webWashColor is used for any of the screen backgrounds\n// PrimaryText is used for any of the titles\n// Secondary Text is used for any paragraphs or sub text\nexport const lightTheme: colorsInterface = {\n    warningAlpha22: 'rgba(247, 161, 32, 0.22)',\n    warningAlpha62: 'rgba(247, 161, 23, 0.62)',\n\n    logoColor: '#282828',\n    headerBackground: 'white',\n    background: 'rgba(255, 255, 255, 0.05)',\n    primary: '#009655',\n    accent: '#6A338F',\n    errorColor: '#B20A28',\n    primaryTextColor: '#050505',\n    text: '#050505',\n    wireColor: '#B88114',\n    primaryIconColor: 'black',\n    primaryIconTextColor: '#5A626B',\n    secondaryIconColor: '#4A4A4A',\n    secondaryIconTextColor: '#4A4A4A',\n    secondaryTextColor: '#65676B',\n    secondaryButtonBackgroundColor: 'rgb(228, 230, 235)',\n    webWashColor: '#f0f2f5',\n    dividerColor: 'rgba(204, 204, 204, 0.3)',\n    cardBorderColor: '#282828',\n    cardBackgroundColor: '#fff',\n    commentBackgroundColor: '#f0f2f5',\n    blackAlpha00: 'rgba(0, 0, 0, 0)',\n    blackAlpha01: 'rgba(0, 0, 0, 0.01)',\n    blackAlpha05: 'rgba(0, 0, 0, 0.05)',\n    blackAlpha10: 'rgba(0, 0, 0, 0.1)',\n    blackAlpha15: 'rgba(0, 0, 0, 0.15)',\n    blackAlpha20: 'rgba(0, 0, 0, 0.2)',\n    blackAlpha30: 'rgba(0, 0, 0, 0.3)',\n    blackAlpha40: 'rgba(0, 0, 0, 0.4)',\n    blackAlpha50: 'rgba(0, 0, 0, 0.5)',\n    blackAlpha60: 'rgba(0, 0, 0, 0.6)',\n    blackAlpha70: 'rgba(0, 0, 0, 0.6)',\n    blackAlpha80: 'rgba(0, 0, 0, 0.8)',\n    blackAlpha95: 'rgba(0, 0, 0, 0.95)',\n    blackAlpha100: 'rgba(0, 0, 0, 1)',\n    whiteAlpha00: 'rgba(255, 255, 255, 0.00)',\n    whiteAlpha01: 'rgba(255, 255, 255, 0.01)',\n    whiteAlpha05: 'rgba(255, 255, 255, 0.05)',\n    whiteAlpha10: 'rgba(255, 255, 255, 0.10)',\n    whiteAlpha15: 'rgba(255, 255, 255, 0.15)',\n    whiteAlpha20: 'rgba(255, 255, 255, 0.2)',\n    whiteAlpha30: 'rgba(255, 255, 255, 0.3)',\n    whiteAlpha40: 'rgba(255, 255, 255, 0.4)',\n    whiteAlpha50: 'rgba(255, 255, 255, 0.5)',\n    whiteAlpha60: 'rgba(255, 255, 255, 0.6)',\n    whiteAlpha70: 'rgba(255, 255, 255, 0.7)',\n    whiteAlpha80: 'rgba(255, 255, 255, 0.8)',\n    whiteAlpha90: 'rgba(255, 255, 255, 0.9)',\n    whiteAlpha95: 'rgba(255, 255, 255, 0.95)',\n    whiteAlpha97: 'rgba(255, 255, 255, 0.97)',\n    whiteAlpha100: 'rgba(255, 255, 255, 1)',\n    disabled: '',\n    backdrop: '',\n    placeholder: '',\n    secondary: '',\n    grey: '',\n    darkGrey: '',\n    error: '',\n    white: '',\n    black: '',\n    reference: '',\n    colorOne: '#009655',\n    colorTwo: '#51246D',\n    colorThree: '#1B88BF',\n    colorSix: '',\n    successColor: '',\n    accent50: '',\n    accent80: '',\n    selectedColorOne10: '',\n    selectedColorOne40: '',\n    selectedColorOne100: '',\n    mediumTextColor: '',\n    tabBarColor: '',\n    blackAlpha90: '',\n    blackAlpha97: '',\n    shadow: '',\n    bluetooth: '',\n    colorFour: '',\n    colorFive: '',\n    primaryContainer: '',\n    secondaryContainer: '',\n    tertiary: '',\n    tertiaryContainer: '',\n    surface: '',\n    surfaceVariant: '',\n    surfaceDisabled: '',\n    errorContainer: '',\n    onPrimary: '',\n    onPrimaryContainer: '',\n    onSecondary: '',\n    onSecondaryContainer: '',\n    onTertiary: '',\n    onTertiaryContainer: '',\n    onSurface: '',\n    onSurfaceVariant: '',\n    onSurfaceDisabled: '',\n    onError: '',\n    onErrorContainer: '',\n    onBackground: '',\n    outline: '',\n    inverseOnSurface: '',\n    inverseSurface: '',\n    inversePrimary: '',\n    elevation: {\n        level1: '',\n        level2: '',\n        level3: '',\n        level4: '',\n        level5: ''\n    }\n};\n\nexport const darkTheme: colorsInterface = {\n    errorColor: '#B20A28',\n    logoColor: '#fff',\n    headerBackground: 'white',\n    background: 'rgba(0, 0, 0, 0.5)',\n    accent: '#51246D',\n\n    primary: '#05AA97',\n    reference: '#1B88BF',\n\n    cardBorderColor: '#282828',\n    cardBackgroundColor: '#212121',\n    dividerColor: '#65676B',\n    primaryTextColor: '#e4e6eb',\n    text: '#e4e6eb',\n    secondaryTextColor: '#4A4A4A',\n    secondaryButtonBackgroundColor: 'rgba(255, 255, 255, 0.1)',\n    webWashColor: '#000',\n    mediumTextColor: '#828282',\n    primaryIconColor: '#828282',\n    primaryIconTextColor: '#CCCCCC',\n    secondaryIconColor: '#4A4A4A',\n    secondaryIconTextColor: '#4A4A4A',\n    tabBarColor: '#1C1C1C',\n    commentBackgroundColor: '#3a3b3c',\n    warningAlpha22: 'rgba(247, 161, 32, 0.22)',\n    warningAlpha62: 'rgba(247, 161, 23, 0.62)',\n\n    whiteAlpha00: 'rgba(0, 0, 0, 0)',\n    whiteAlpha01: 'rgba(0, 0, 0, 0.01)',\n    whiteAlpha05: 'rgba(0, 0, 0, 0.05)',\n    whiteAlpha10: 'rgba(0, 0, 0, 0.1)',\n    whiteAlpha15: 'rgba(0, 0, 0, 0.15)',\n    whiteAlpha20: 'rgba(0, 0, 0, 0.2)',\n    whiteAlpha30: 'rgba(0, 0, 0, 0.3)',\n    whiteAlpha40: 'rgba(0, 0, 0, 0.4)',\n    whiteAlpha50: 'rgba(0, 0, 0, 0.5)',\n    whiteAlpha60: 'rgba(0, 0, 0, 0.6)',\n    whiteAlpha70: 'rgba(0, 0, 0, 0.6)',\n    whiteAlpha80: 'rgba(0, 0, 0, 0.8)',\n    whiteAlpha90: 'rgba(0, 0, 0, 0.9)',\n\n    whiteAlpha95: 'rgba(0, 0, 0, 0.95)',\n    whiteAlpha97: 'rgba(0, 0, 0, 0.97)',\n    whiteAlpha100: 'rgba(0, 0, 0, 1)',\n\n    blackAlpha00: 'rgba(255, 255, 255, 0.00)',\n    blackAlpha01: 'rgba(255, 255, 255, 0.01)',\n    blackAlpha05: 'rgba(255, 255, 255, 0.05)',\n    blackAlpha10: 'rgba(255, 255, 255, 0.10)',\n    blackAlpha15: 'rgba(255, 255, 255, 0.15)',\n    blackAlpha20: 'rgba(255, 255, 255, 0.2)',\n    blackAlpha30: 'rgba(255, 255, 255, 0.3)',\n    blackAlpha40: 'rgba(255, 255, 255, 0.4)',\n    blackAlpha50: 'rgba(255, 255, 255, 0.5)',\n    blackAlpha60: 'rgba(255, 255, 255, 0.6)',\n    blackAlpha70: 'rgba(255, 255, 255, 0.7)',\n    blackAlpha80: 'rgba(255, 255, 255, 0.8)',\n    blackAlpha90: 'rgba(255, 255, 255, 0.9)',\n    blackAlpha95: 'rgba(255, 255, 255, 0.95)',\n    blackAlpha97: 'rgba(255, 255, 255, 0.97)',\n    blackAlpha100: 'rgba(255, 255, 255, 1)',\n\n    bluetooth: '#1F64BB',\n    disabled: '',\n    backdrop: '',\n    placeholder: '',\n    secondary: '',\n    grey: '',\n    darkGrey: '',\n    error: '',\n    white: '',\n    black: '',\n    successColor: '',\n    colorSix: '',\n    shadow: '',\n    colorOne: '',\n    colorTwo: '',\n    colorThree: '',\n    colorFour: '',\n    colorFive: '',\n    accent50: '',\n    accent80: '',\n    wireColor: '',\n    selectedColorOne10: '',\n    selectedColorOne40: '',\n    selectedColorOne100: '',\n    primaryContainer: '',\n    secondaryContainer: '',\n    tertiary: '',\n    tertiaryContainer: '',\n    surface: '',\n    surfaceVariant: '',\n    surfaceDisabled: '',\n    errorContainer: '',\n    onPrimary: '',\n    onPrimaryContainer: '',\n    onSecondary: '',\n    onSecondaryContainer: '',\n    onTertiary: '',\n    onTertiaryContainer: '',\n    onSurface: '',\n    onSurfaceVariant: '',\n    onSurfaceDisabled: '',\n    onError: '',\n    onErrorContainer: '',\n    onBackground: '',\n    outline: '',\n    inverseOnSurface: '',\n    inverseSurface: '',\n    inversePrimary: '',\n    elevation: {\n        level1: '',\n        level2: '',\n        level3: '',\n        level4: '',\n        level5: ''\n    }\n};\n\nexport const shadows = {\n    shadow1: 'rgba(0, 0, 0, 0.1)',\n    shadow2: 'rgba(0, 0, 0, 0.2)',\n    shadow5: 'rgba(0, 0, 0, 0.5)'\n};\n\nexport const handleSnackbarColor = (\n    type?: string,\n    theme?: ThemeInterface\n): string => {\n    if (!type || !theme) {\n        return '#fff';\n    } else {\n        switch (type) {\n            case 'success':\n                return theme.colors.successColor;\n            case 'error':\n                return theme.colors.errorColor;\n            case 'none':\n                return theme.colors.primaryTextColor;\n            default:\n                return theme.colors.primaryTextColor;\n        }\n    }\n};\n\nconst capFontSize: capFontSizeInterface = (\n    fontSize: number | string,\n    maxFontSize: number\n): number | number => {\n    if (maxFontSize && typeof fontSize === 'number') {\n        if (maxFontSize < fontSize) {\n            return maxFontSize;\n        } else {\n            return fontSize;\n        }\n    } else {\n        return maxFontSize;\n    }\n};\n\nconst paddingObj: paddingForThemeType = {\n    paddingForScrollView: paddingForScrollView,\n    paddingForScrollViewTwo: paddingForScrollViewTwo\n};\n\nexport const theme: ThemeInterface = {\n    padding: paddingObj,\n    handleFontSizeProps: handleFontSizeProps,\n    handleUnitProps: handleUnitProps,\n    boxShadowOne: boxShadowOne,\n    handleSnackbarColor: handleSnackbarColor,\n    colors: lightTheme,\n    fonts: configureFonts(),\n    capFontSize: capFontSize,\n    deviceOnTheme: {\n        platform: Platform.OS,\n        isTablet: false,\n        hasNotch: false,\n        statusBarHeight: STATUSBAR_HEIGHT,\n        hasDynamicIsland: false,\n        screenWidth: Dimensions.get('window').width,\n        screenHeight: Dimensions.get('window').height\n    }\n};\n","import { View } from 'react-native';\nimport styled from 'styled-components/native';\nimport { theme } from '../../../../providers/ThemeProvider/theme';\nimport { BaseViewInterface } from '../../../../types/base-view.interface';\nimport { ThemeInterface } from '../../../../types/theme.types';\n\ninterface ViewBaseContainerInterface extends BaseViewInterface {\n  theme: ThemeInterface;\n  padding?: number | string;\n  paddingLeft?: number | string;\n  visible?: boolean;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n  width?: number | string;\n  marginTop?: number | string;\n  paddingRight?: number | string;\n  paddingTop?: number | string;\n  borderWidth?: number | string;\n  borderColor?: string;\n}\nconst BaseViewContainer = styled(View) <ViewBaseContainerInterface>`\n  padding-left: ${({\n  theme: {\n    handleUnitProps,\n    padding: { paddingForScrollView }\n  },\n  paddingLeft\n}) =>\n    paddingLeft\n      ? handleUnitProps(paddingLeft)\n      : handleUnitProps(paddingForScrollView)};\n\n  padding-right: ${({\n        theme: {\n          handleUnitProps,\n          padding: { paddingForScrollView }\n        },\n        paddingRight\n      }) =>\n    paddingRight\n      ? handleUnitProps(paddingRight)\n      : handleUnitProps(paddingForScrollView)};\n\n  padding-top: ${({\n        theme: {\n          handleUnitProps,\n          padding: { paddingForScrollView }\n        },\n        paddingTop\n      }) =>\n    paddingTop\n      ? handleUnitProps(paddingTop)\n      : handleUnitProps(paddingForScrollView)};\n\n  background-color: ${({ backgroundOpacity, theme: { colors } }) => backgroundOpacity ? `rgba(0, 0, 0, ${backgroundOpacity})` : colors.webWashColor};\n\n  ${({ maxHeight, theme: { handleUnitProps } }) =>\n    maxHeight ? `max-height: ${handleUnitProps(maxHeight)}` : null};\n\n\n\n\n  ${({ width, theme: { handleUnitProps } }) =>\n    width ? `width: ${handleUnitProps(width)}` : ''};\n\n  ${({ maxWidth, theme: { handleUnitProps } }) =>\n    maxWidth ? `max-width: ${handleUnitProps(maxWidth)}` : null};\n\n\n  ${({ position }) =>\n    position ? `position: ${position}` : null};\n\n  padding-bottom: ${({\n      theme: {\n        handleUnitProps,\n        padding: { paddingForScrollView }\n      },\n      paddingBottom = paddingForScrollView\n    }) =>\n    paddingBottom\n      ? handleUnitProps(paddingBottom)\n      : handleUnitProps(paddingForScrollView)};\n\n  background-color: ${({\n        theme: {\n          colors: { webWashColor }\n        }\n      }) => webWashColor};\n\n  ${({ borderColor }) => (borderColor ? `border-color: ${borderColor}` : null)};\n\n  ${({ borderWidth, theme: { handleUnitProps } }) =>\n    borderWidth ? `border-width: ${handleUnitProps(borderWidth)}` : null};\n`;\n\nBaseViewContainer.defaultProps = {\n  theme: theme\n};\n\nexport default BaseViewContainer;\n","import { View } from 'react-native';\nimport React from 'react';\nimport ViewContainerStyled from './styles';\nimport { theme } from '../../../../providers/ThemeProvider/theme';\n\ninterface viewContainerProps extends React.ComponentProps<typeof View> {\n  padding?: string | number;\n  paddingTop?: string | number;\n  width?: string | number;\n  maxWidth?: string | number;\n  paddingLeft?: string | number;\n  paddingRight?: string | number;\n  flex?: number;\n  maxHeight?: string | number;\n  backgroundColorFromTheme?: keyof typeof theme.colors;\n  backgroundColor?: string;\n  paddingBottom?: string | number;\n  height?: string | number;\n  borderWidth?: number | string;\n  borderColor?: string;\n  children: React.ReactNode | React.ReactNode[];\n}\n\nfunction ViewContainer(props: viewContainerProps) {\n  const {\n    children,\n    padding,\n    paddingTop,\n    width,\n    maxWidth,\n    paddingLeft,\n    paddingRight,\n    backgroundColor,\n    backgroundColorFromTheme,\n    flex,\n    maxHeight,\n    paddingBottom,\n    height,\n    borderWidth,\n    borderColor\n  } = props;\n  return (\n    <ViewContainerStyled\n      backgroundColorFromTheme={backgroundColorFromTheme}\n      padding={padding}\n      backgroundColor={backgroundColor}\n      paddingTop={paddingTop}\n      width={width}\n      flex={flex}\n      maxWidth={maxWidth}\n      paddingLeft={paddingLeft}\n      paddingRight={paddingRight}\n      maxHeight={maxHeight}\n      paddingBottom={paddingBottom}\n      height={height}\n      borderWidth={borderWidth}\n      borderColor={borderColor}>\n      {children}\n    </ViewContainerStyled>\n  );\n}\n\nexport default ViewContainer;\n","import { View } from 'react-native';\nimport styled from 'styled-components/native';\nimport { theme } from '../../../../providers/ThemeProvider/theme';\nimport { BaseViewInterface } from '../../../../types/base-view.interface';\nimport { ThemeInterface } from '../../../../types/theme.types';\nimport BaseViewContainer from '../BaseViewContainer/BaseViewContainer';\n\ninterface ViewContainerInterface extends BaseViewInterface {\n  theme: ThemeInterface;\n  padding?: number | string;\n  paddingLeft?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n  width?: number | string;\n  flex?: number;\n  backgroundColor?: string;\n  backgroundColorFromTheme?: keyof typeof theme.colors;\n  paddingRight?: number | string;\n  paddingTop?: number | string;\n  borderWidth?: number | string;\n  borderColor?: string;\n}\nconst ViewContainerStyled = styled(BaseViewContainer) <ViewContainerInterface>`\n\n  ${({ backgroundColorFromTheme, theme }) =>\n    backgroundColorFromTheme && theme.colors[backgroundColorFromTheme]\n      ? `background: ${theme.colors[backgroundColorFromTheme]}` : ''}\n\n`;\n\nViewContainerStyled.defaultProps = {\n  theme: theme\n};\n\nexport default ViewContainerStyled;\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { View } from 'react-native'\\nimport { action } from '@storybook/addon-actions';\\nimport { text } from '@storybook/addon-knobs';\\nimport { storiesOf } from '@storybook/react-native';\\nimport React from 'react';\\nimport ViewContainer from '../../atoms/containers/ViewContainer/ViewContainer';\\nimport NeumorphismSimpleButton from './NeumorphismSimpleButton';\\n\\n\\n\\n\\nstoriesOf('NeumorphismSimpleButton', module)\\n  .addDecorator((getStory) => <ViewContainer backgroundColor='#ecf0f3'>{getStory()}</ViewContainer>)\\n  .add('with text', () => (\\n    <NeumorphismSimpleButton />\\n  ))\\n\\n\\n\\n\\n\\n\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"with-text\":{\"startLoc\":{\"col\":7,\"line\":14},\"endLoc\":{\"col\":3,\"line\":16},\"startBody\":{\"col\":20,\"line\":14},\"endBody\":{\"col\":3,\"line\":16}}};\n    \nimport { View } from 'react-native'\nimport { action } from '@storybook/addon-actions';\nimport { text } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react-native';\nimport React from 'react';\nimport ViewContainer from '../../atoms/containers/ViewContainer/ViewContainer';\nimport NeumorphismSimpleButton from './NeumorphismSimpleButton';\n\n\n\n\nstoriesOf('NeumorphismSimpleButton', module).addParameters({ storySource: { source: __STORY__, locationsMap: __LOCATIONS_MAP__ } })\n  .addDecorator((getStory) => <ViewContainer backgroundColor='#ecf0f3'>{getStory()}</ViewContainer>)\n  .add('with text', () => (\n    <NeumorphismSimpleButton />\n  ))\n\n\n\n\n\n\n","import { View, Text, TouchableWithoutFeedback } from \"react-native\";\nimport React from \"react\";\nimport {\n    ButtonOuter,\n    ButtonInner,\n    ButtonFaceGradient,\n} from \"./styles\";\nimport { useCallback, useState, useMemo } from \"react\";\n\ntype ButtonProps = {\n    onPress: () => void;\n    size: number;\n}\n\nfunction NeumorphismSimpleButton(props: ButtonProps) {\n    const { onPress, size = 150 } = props;\n    const [isDown, setDown] = useState(false);\n\n    const handlePressIn = useCallback(() => {\n        setDown(true);\n    }, [setDown]);\n\n    const handlePressOut = useCallback(() => {\n        setDown(false);\n    }, [setDown]);\n    const gradientColors = useMemo(() => isDown ? ['#4da7db', '#5bc6ff'] : ['#5bc6ff', '#4da7db'], [isDown]);\n\n\n    return (\n        <TouchableWithoutFeedback\n            style={{ width: size, height: size }}\n            onPress={onPress}\n            onPressIn={handlePressIn}\n            onPressOut={handlePressOut}>\n            <ButtonOuter size={size}>\n                <ButtonInner size={size}>\n                    <ButtonFaceGradient size={size} colors={gradientColors}  >\n\n                    </ButtonFaceGradient>\n                </ButtonInner>\n            </ButtonOuter>\n        </TouchableWithoutFeedback>\n    );\n}\n\nexport default NeumorphismSimpleButton;\n","import styled from \"styled-components/native\";\nimport { Button, TouchableOpacity, View } from \"react-native\";\nimport { LinearGradient } from \"expo-linear-gradient\";\n\nexport const Container = styled(View)`\n  border-radius: 30px;\n  position: relative;\n`;\n\nexport const ButtonFace = styled(View)`\n  padding: 50px;\n`;\n\nexport const ButtonFaceGradient = styled(LinearGradient) <{ size: number }>`\n    \n    border-radius: 12px;\n    width: ${({ size }) => `${size}px`}\n    height: ${({ size }) => `${size}px`}\n\n \n    \n`;\n\nexport const ButtonOuter = styled(View)`\ndisplay: flex;\n \n background: #ecf0f3;\n\n display: flex;\n \n background: #ecf0f3;\n\n    border-radius: 30px;\n    shadow-offset: {width: 18, height: 18};\n    shadow-color: #fff;\n    shadow-opacity: 1.0;\n    shadow-radius: 18;\n    shadow-blur: 30;\n    margin-top: 20px;\n    margin-bottom: 20px;\n\n \n`;\n\nexport const ButtonInner = styled(View)`\ndisplay: flex;\n \n background: #ecf0f3;\n\n    border-radius: 30px;\n    shadow-offset: {width: -18, height: -18};\n    shadow-color: #d1d9e6;\n    shadow-opacity: 1.0;\n    shadow-radius: 18;\n    shadow-blur: 30;\n\n \n`;\n"],"mappings":";;;;;;;;;;AAIA;;;;;;;;;;;;ACJA;;;;;;;;;;;;ACCA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACUA;;;;;;;;;;;;;ACVA;;;;;;;;;;;;ACDA;;;;A","sourceRoot":""}